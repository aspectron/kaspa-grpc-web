import { FlowGRPCWeb } from '@aspectron/flow-grpc-web';
export class RPC {
    constructor(options = {}) {
        this.isReady = false;
        this.queue = [];
        this.pending = [];
        this.client = new FlowGRPCWeb(options.grpc || {});
        this.client.on("ready", (clients) => {
            console.log("gRPCWeb::::clients", clients);
            let { RPC } = clients;
            const stream = RPC.MessageStream();
            this.stream = stream;
            console.log("stream", stream);
            stream.on("data", (data) => {
                console.log("stream data", data);
                let item = this.pending.shift();
                if (item) {
                    item.resolve(data);
                }
            });
            stream.on("end", () => {
                console.log("stream end");
            });
            this.isReady = true;
        });
    }
    processQueue() {
        if (!this.isReady)
            return;
        let item = this.queue.shift();
        while (item) {
            let req = {};
            req[item.method] = item.data;
            this.pending.push(item);
            this.stream.write(req);
        }
    }
    request(method, data, resolve, reject) {
        this.queue.push({ method, data, resolve, reject });
        this.processQueue();
    }
    getBlock(blockHash) {
        return new Promise((resolve, reject) => {
            this.request('getBlock', { blockHash }, resolve, reject);
        });
    }
    getAddressTransactions(address, limit, skip) {
        return new Promise((resolve, reject) => {
            this.request('getAddressTransactions', { address, limit, skip }, resolve, reject);
        });
    }
    getUtxos(address, limit, skip) {
        return new Promise((resolve, reject) => {
            this.request('getUTXOsByAddressRequest', { address, limit, skip }, resolve, reject);
        });
    }
    postTx(rawTransaction) {
        return new Promise((resolve, reject) => {
            this.request('postTx', { rawTransaction }, resolve, reject);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3JwYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFVckQsTUFBTSxPQUFPLEdBQUc7SUFPZixZQUFZLFVBQVksRUFBRTtRQU4xQixZQUFPLEdBQVcsS0FBSyxDQUFDO1FBR3hCLFVBQUssR0FBZSxFQUFFLENBQUM7UUFDdkIsWUFBTyxHQUFlLEVBQUUsQ0FBQztRQUd4QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUUsRUFBRSxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBVyxFQUFDLEVBQUU7WUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUMxQyxJQUFJLEVBQUMsR0FBRyxFQUFDLEdBQUcsT0FBTyxDQUFDO1lBRXBCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUM3QixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQVcsRUFBQyxFQUFFO2dCQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFDaEMsSUFBSSxJQUFJLEdBQXVCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3BELElBQUcsSUFBSSxFQUFDO29CQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ25CO1lBQ0YsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFFLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDMUIsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFDRCxZQUFZO1FBQ1gsSUFBRyxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ2YsT0FBTTtRQUNQLElBQUksSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xELE9BQU0sSUFBSSxFQUFDO1lBQ1YsSUFBSSxHQUFHLEdBQU8sRUFBRSxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjtJQUNGLENBQUM7SUFDRCxPQUFPLENBQUMsTUFBYSxFQUFFLElBQVEsRUFBRSxPQUFnQixFQUFFLE1BQWU7UUFDakUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBQ0QsUUFBUSxDQUFDLFNBQWdCO1FBQ3hCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUE7SUFDSCxDQUFDO0lBQ0Qsc0JBQXNCLENBQUMsT0FBYyxFQUFFLEtBQVksRUFBRSxJQUFXO1FBQy9ELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLENBQUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUNELFFBQVEsQ0FBQyxPQUFjLEVBQUUsS0FBWSxFQUFFLElBQVc7UUFDakQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUE7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLGNBQXNCO1FBQzVCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQyxjQUFjLEVBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDSCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zsb3dHUlBDV2VifSBmcm9tICdAYXNwZWN0cm9uL2Zsb3ctZ3JwYy13ZWInO1xuLy9jb25zdCBGbG93R1JQQ1dlYiA9IG5ldyBGbG93R1JQQ1dlYigpO1xuaW1wb3J0IHtJUlBDLCBBcGl9IGZyb20gJy4uL3R5cGVzL2N1c3RvbS10eXBlcyc7XG5pbnRlcmZhY2UgUXVldWVJdGVte1xuXHRtZXRob2Q6c3RyaW5nLFxuXHRkYXRhOmFueSxcblx0cmVzb2x2ZTpGdW5jdGlvbixcblx0cmVqZWN0OkZ1bmN0aW9uXG59XG5cbmV4cG9ydCBjbGFzcyBSUEMgaW1wbGVtZW50cyBJUlBDe1xuXHRpc1JlYWR5OmJvb2xlYW4gPSBmYWxzZTtcblx0Y2xpZW50OkZsb3dHUlBDV2ViO1xuXHRzdHJlYW06YW55O1xuXHRxdWV1ZTpRdWV1ZUl0ZW1bXSA9IFtdO1xuXHRwZW5kaW5nOlF1ZXVlSXRlbVtdID0gW107XG5cblx0Y29uc3RydWN0b3Iob3B0aW9uczphbnk9e30pe1xuXHRcdHRoaXMuY2xpZW50ID0gbmV3IEZsb3dHUlBDV2ViKG9wdGlvbnMuZ3JwY3x8e30pO1xuXG5cdFx0dGhpcy5jbGllbnQub24oXCJyZWFkeVwiLCAoY2xpZW50czphbnkpPT57XG5cdFx0XHRjb25zb2xlLmxvZyhcImdSUENXZWI6Ojo6Y2xpZW50c1wiLCBjbGllbnRzKVxuXHRcdFx0bGV0IHtSUEN9ID0gY2xpZW50cztcblxuXHRcdFx0Y29uc3Qgc3RyZWFtID0gUlBDLk1lc3NhZ2VTdHJlYW0oKTtcblx0XHRcdHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuXHRcdFx0Y29uc29sZS5sb2coXCJzdHJlYW1cIiwgc3RyZWFtKVxuXHRcdFx0c3RyZWFtLm9uKFwiZGF0YVwiLCAoZGF0YTpzdHJpbmcpPT57XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwic3RyZWFtIGRhdGFcIiwgZGF0YSlcblx0XHRcdFx0bGV0IGl0ZW06UXVldWVJdGVtfHVuZGVmaW5lZCA9IHRoaXMucGVuZGluZy5zaGlmdCgpO1xuXHRcdFx0XHRpZihpdGVtKXtcblx0XHRcdFx0XHRpdGVtLnJlc29sdmUoZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHRzdHJlYW0ub24oXCJlbmRcIiwgKCk9Pntcblx0XHRcdFx0Y29uc29sZS5sb2coXCJzdHJlYW0gZW5kXCIpXG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5pc1JlYWR5ID0gdHJ1ZTtcblx0XHR9KVxuXHR9XG5cdHByb2Nlc3NRdWV1ZSgpe1xuXHRcdGlmKCF0aGlzLmlzUmVhZHkpXG5cdFx0XHRyZXR1cm5cblx0XHRsZXQgaXRlbTpRdWV1ZUl0ZW18dW5kZWZpbmVkID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuXHRcdHdoaWxlKGl0ZW0pe1xuXHRcdFx0bGV0IHJlcTphbnkgPSB7fTtcblx0XHRcdHJlcVtpdGVtLm1ldGhvZF0gPSBpdGVtLmRhdGE7XG5cdFx0XHR0aGlzLnBlbmRpbmcucHVzaChpdGVtKTtcblx0XHRcdHRoaXMuc3RyZWFtLndyaXRlKHJlcSk7XG5cdFx0fVxuXHR9XG5cdHJlcXVlc3QobWV0aG9kOnN0cmluZywgZGF0YTphbnksIHJlc29sdmU6RnVuY3Rpb24sIHJlamVjdDpGdW5jdGlvbil7XG5cdFx0dGhpcy5xdWV1ZS5wdXNoKHttZXRob2QsIGRhdGEsIHJlc29sdmUsIHJlamVjdH0pO1xuXHRcdHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG5cdH1cblx0Z2V0QmxvY2soYmxvY2tIYXNoOnN0cmluZyk6IFByb21pc2U8QXBpLkJsb2NrUmVzcG9uc2U+e1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHRcdFx0dGhpcy5yZXF1ZXN0KCdnZXRCbG9jaycsIHtibG9ja0hhc2h9LCByZXNvbHZlLCByZWplY3QpO1xuXHRcdH0pXG5cdH1cblx0Z2V0QWRkcmVzc1RyYW5zYWN0aW9ucyhhZGRyZXNzOnN0cmluZywgbGltaXQ6bnVtYmVyLCBza2lwOm51bWJlcik6IFByb21pc2U8QXBpLlRyYW5zYWN0aW9uW10+e1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHRcdFx0dGhpcy5yZXF1ZXN0KCdnZXRBZGRyZXNzVHJhbnNhY3Rpb25zJywge2FkZHJlc3MsIGxpbWl0LCBza2lwfSwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0XHR9KVxuXHR9XG5cdGdldFV0eG9zKGFkZHJlc3M6c3RyaW5nLCBsaW1pdDpudW1iZXIsIHNraXA6bnVtYmVyKTogUHJvbWlzZTxBcGkuVXR4b1tdPntcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9Pntcblx0XHRcdHRoaXMucmVxdWVzdCgnZ2V0VVRYT3NCeUFkZHJlc3NSZXF1ZXN0Jywge2FkZHJlc3MsIGxpbWl0LCBza2lwfSwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0XHR9KVxuXHR9XG5cdHBvc3RUeChyYXdUcmFuc2FjdGlvbjogc3RyaW5nKTogUHJvbWlzZTxBcGkuU3VjY2Vzc1Jlc3BvbnNlPntcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9Pntcblx0XHRcdHRoaXMucmVxdWVzdCgncG9zdFR4Jywge3Jhd1RyYW5zYWN0aW9ufSwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0XHR9KVxuXHR9XG59Il19