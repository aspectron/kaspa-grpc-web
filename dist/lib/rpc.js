var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { FlowGRPCWeb, dpc, clearDPC } from '@aspectron/flow-grpc-web';
export const Deferred = () => {
    let methods = {};
    let promise = new Promise((resolve, reject) => {
        methods = { resolve, reject };
    });
    Object.assign(promise, methods);
    return promise;
};
export class RPC {
    constructor(options = {}) {
        this.isReady = false;
        this.queue = [];
        this.reconnect = true;
        this.verbose = false;
        this.subscribers = new Map();
        this.isConnected = false;
        this.connectCBs = [];
        this.connectFailureCBs = [];
        this.errorCBs = [];
        this.disconnectCBs = [];
        this.options = Object.assign({
            reconnect: true,
            verbose: false,
            uid: (Math.random() * 1000).toFixed(0)
        }, options || {});
        this.log = Function.prototype.bind.call(console.log, console, `[Kaspa gRPC ${this.options.uid}]:`);
        this.pending = {};
        this.reconnect = this.options.reconnect;
        this.client = new FlowGRPCWeb(options.clientConfig || {});
        this.serviceClientSignal = Deferred();
        this.client.on("ready", (clients) => {
            console.log("gRPCWeb::::clients", clients);
            let { RPC } = clients;
            this.serviceClient = RPC;
            this.serviceClientSignal.resolve();
            /*
            const stream = RPC.MessageStream();
            this.stream = stream;
            console.log("stream", stream)
            stream.on("end", ()=>{
                console.log("stream end")
            });
            this.initIntake(stream);
            */
        });
        this.connect();
    }
    getServiceClient() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.serviceClientSignal;
            return this.serviceClient;
        });
    }
    connect() {
        this.reconnect = true;
        return this._connect();
    }
    _connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // this.reconnect = true;
            this.verbose && this.log('gRPC Client connecting to', this.options.host);
            const RPC = yield this.getServiceClient();
            this.stream = RPC.MessageStream();
            this.initIntake(this.stream);
            this.isReady = true;
            this.processQueue();
            const reconnect = () => {
                this._setConnected(false);
                if (this.reconnect_dpc) {
                    clearDPC(this.reconnect_dpc);
                    delete this.reconnect_dpc;
                }
                this.clearPending();
                delete this.stream;
                //delete this.client;
                if (this.reconnect) {
                    this.reconnect_dpc = dpc(1000, () => {
                        this._connect();
                    });
                }
            };
            this.stream.on('error', (error) => {
                // console.log("client:",error);
                this.errorCBs.forEach(fn => fn(error.toString(), error));
                this.verbose && this.log('stream:error', error);
                reconnect();
            });
            this.stream.on('end', (...args) => {
                this.verbose && this.log('stream:end', ...args);
                reconnect();
            });
            yield new Promise((resolve) => {
                dpc(100, () => __awaiter(this, void 0, void 0, function* () {
                    let response = yield this.request('getVirtualSelectedParentBlueScoreRequest', {})
                        .catch(e => {
                        this.connectFailureCBs.forEach(fn => fn(e));
                    });
                    this.verbose && this.log("getVirtualSelectedParentBlueScoreRequest:response", response);
                    if (response && response.blueScore) {
                        this._setConnected(true);
                    }
                    resolve();
                }));
            });
        });
    }
    initIntake(stream) {
        stream.on('data', (data) => {
            if (data.payload) {
                let name = data.payload;
                let payload = data[name];
                let ident = name.replace(/^get|Response$/ig, '').toLowerCase();
                this.handleIntake({ name, payload, ident });
            }
        });
    }
    handleIntake(o) {
        if (this.intakeHandler) {
            this.intakeHandler(o);
        }
        else {
            let handlers = this.pending[o.name];
            this.verbose && console.log('intake:', o, 'handlers:', handlers);
            if (handlers && handlers.length) {
                let pendingItem = handlers.shift();
                if (pendingItem)
                    pendingItem.resolve(o.payload);
            }
            let subscribers = this.subscribers.get(o.name);
            if (subscribers) {
                subscribers.map(subscriber => {
                    subscriber.callback(o.payload);
                });
            }
        }
    }
    setIntakeHandler(fn) {
        this.intakeHandler = fn;
    }
    processQueue() {
        if (!this.isReady)
            return;
        let item = this.queue.shift();
        while (item) {
            const resp = item.method.replace(/Request$/, 'Response');
            if (!this.pending[resp])
                this.pending[resp] = [];
            let handlers = this.pending[resp];
            handlers.push(item);
            let req = {};
            req[item.method] = item.data;
            this.stream.write(req);
            item = this.queue.shift();
        }
    }
    clearPending() {
        Object.keys(this.pending).forEach(key => {
            let list = this.pending[key];
            list.forEach(o => o.reject('closing by force'));
            this.pending[key] = [];
        });
    }
    _setConnected(isConnected) {
        if (this.isConnected == isConnected)
            return;
        this.isConnected = isConnected;
        let cbs = isConnected ? this.connectCBs : this.disconnectCBs;
        //console.log("this.isConnected", this.isConnected, cbs)
        cbs.forEach(fn => {
            fn();
        });
    }
    onConnect(callback) {
        this.connectCBs.push(callback);
        if (this.isConnected)
            callback();
    }
    onConnectFailure(callback) {
        this.connectFailureCBs.push(callback);
    }
    onError(callback) {
        this.errorCBs.push(callback);
    }
    onDisconnect(callback) {
        this.disconnectCBs.push(callback);
    }
    disconnect() {
        if (this.reconnect_dpc) {
            clearDPC(this.reconnect_dpc);
            delete this.reconnect_dpc;
        }
        this.reconnect = false;
        this.stream && this.stream.end();
        this.clearPending();
    }
    request(method, data) {
        return new Promise((resolve, reject) => {
            this.queue.push({ method, data, resolve, reject });
            this.processQueue();
        });
    }
    subscribe(subject, data = {}, callback) {
        if (typeof data == 'function') {
            callback = data;
            data = {};
        }
        if (!this.client)
            return Promise.reject('not connected');
        let eventName = this.subject2EventName(subject);
        console.log("subscribe:eventName", eventName);
        let subscribers = this.subscribers.get(eventName);
        if (!subscribers) {
            subscribers = [];
            this.subscribers.set(eventName, subscribers);
        }
        let uid = (Math.random() * 100000 + Date.now()).toFixed(0);
        subscribers.push({ uid, callback });
        let p = this.request(subject, data);
        p.uid = uid;
        return p;
    }
    subject2EventName(subject) {
        let eventName = subject.replace("notify", "").replace("Request", "Notification");
        return eventName[0].toLowerCase() + eventName.substr(1);
    }
    unSubscribe(subject, uid = '') {
        let eventName = this.subject2EventName(subject);
        let subscribers = this.subscribers.get(eventName);
        if (!subscribers)
            return;
        if (!uid) {
            this.subscribers.delete(eventName);
        }
        else {
            subscribers = subscribers.filter(sub => sub.uid != uid);
            this.subscribers.set(eventName, subscribers);
        }
    }
    subscribeChainChanged(callback) {
        return this.subscribe("notifyChainChangedRequest", {}, callback);
    }
    subscribeBlockAdded(callback) {
        return this.subscribe("notifyBlockAddedRequest", {}, callback);
    }
    subscribeVirtualSelectedParentBlueScoreChanged(callback) {
        return this.subscribe("notifyVirtualSelectedParentBlueScoreChangedRequest", {}, callback);
    }
    subscribeUtxosChanged(addresses, callback) {
        return this.subscribe("notifyUtxosChangedRequest", { addresses }, callback);
    }
    unSubscribeUtxosChanged(uid = '') {
        this.unSubscribe("notifyUtxosChangedRequest", uid);
    }
    getBlock(hash) {
        return this.request('getBlockRequest', { hash, includeBlockVerboseData: true });
    }
    getTransactionsByAddresses(startingBlockHash, addresses) {
        return this.request('getTransactionsByAddressesRequest', {
            startingBlockHash, addresses
        });
    }
    getUtxosByAddresses(addresses) {
        return this.request('getUtxosByAddressesRequest', { addresses });
    }
    submitTransaction(tx) {
        return this.request('submitTransactionRequest', tx);
    }
    getVirtualSelectedParentBlueScore() {
        return this.request('getVirtualSelectedParentBlueScoreRequest', {});
    }
}
//# sourceMappingURL=data:application/json;base64,