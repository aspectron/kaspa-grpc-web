import { FlowGRPCWeb } from '@aspectron/flow-grpc-web';
export class RPC {
    constructor(options = {}) {
        this.isReady = false;
        this.queue = [];
        this.verbose = false;
        this.pending = {};
        this.client = new FlowGRPCWeb(options.grpc || {});
        this.client.on("ready", (clients) => {
            console.log("gRPCWeb::::clients", clients);
            let { RPC } = clients;
            const stream = RPC.MessageStream();
            this.stream = stream;
            console.log("stream", stream);
            stream.on("end", () => {
                console.log("stream end");
            });
            this.initIntake(stream);
            this.isReady = true;
            this.processQueue();
        });
    }
    initIntake(stream) {
        stream.on('data', (data) => {
            if (data.payload) {
                let name = data.payload;
                let payload = data[name];
                let ident = name.replace(/^get|Response$/ig, '').toLowerCase();
                this.handleIntake({ name, payload, ident });
            }
        });
    }
    handleIntake(o) {
        if (this.intakeHandler) {
            this.intakeHandler(o);
        }
        else {
            let handlers = this.pending[o.name];
            this.verbose && console.log('intake:', o, 'handlers:', handlers);
            if (handlers && handlers.length) {
                let pendingItem = handlers.shift();
                if (pendingItem)
                    pendingItem.resolve(o.payload);
            }
        }
    }
    setIntakeHandler(fn) {
        this.intakeHandler = fn;
    }
    processQueue() {
        if (!this.isReady)
            return;
        let item = this.queue.shift();
        while (item) {
            const resp = item.method.replace(/Request$/, 'Response');
            if (!this.pending[resp])
                this.pending[resp] = [];
            let handlers = this.pending[resp];
            handlers.push(item);
            let req = {};
            req[item.method] = item.data;
            this.stream.write(req);
            item = this.queue.shift();
        }
    }
    clearPending() {
        Object.keys(this.pending).forEach(key => {
            let list = this.pending[key];
            list.forEach(o => o.reject('closing by force'));
            this.pending[key] = [];
        });
    }
    request(method, data) {
        return new Promise((resolve, reject) => {
            this.queue.push({ method, data, resolve, reject });
            this.processQueue();
        });
    }
    getBlock(hash) {
        return this.request('getBlockRequest', { hash, includeBlockVerboseData: true });
    }
    getTransactionsByAddresses(startingBlockHash, addresses) {
        return this.request('getTransactionsByAddressesRequest', { startingBlockHash, addresses });
    }
    getUTXOsByAddress(addresses) {
        return this.request('getUTXOsByAddressRequest', { addresses });
    }
    submitTransaction(tx) {
        return this.request('submitTransactionRequest', tx);
    }
}
//# sourceMappingURL=data:application/json;base64,